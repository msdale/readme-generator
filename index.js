#!/usr/bin/env node

//const { generateMarkdown, ensureDistDir, readFile, writeFileToDist, copySrcStyleToDist } = require('./utils/generateMarkdown.js');
const { readFile, ensureDir, writeFile, copyFile, generateMarkdown } = require('./utils/generateMarkdown.js');
const promptUser = require('./utils/gatherData.js');
const argv = require('yargs/yargs')(process.argv.slice(2)).argv;

/*
 * Force argv.c (-c <filepath>) to empty string instead of "undefined" if it is NOT entered.
 */
const preExistReadmeParamsFile = argv.c ? argv.c : "";

/*
 * All the parameters needed to fulfill the promise chain
 */
let promiseParams = {
  "preExistReadmeParamsfile": preExistReadmeParamsFile, // from command-line
  "readmeParams": "",                                   // set by promptUser()
  "readmeParamsFile": "readme-params.json",             // readmeParams is persisted in this file
  "readmeContents": "",                                 // generated by generateMarkdown()
  "readmeContentsFile": "README.md",                    // the readme file name
  "distDir": "./dist",                                  // provided by ensureDir() if needed
  "imagesDir": "./dist/assets/images",
  "preTextDir": "./dist/assets/license-docs/pretext",
  "fullDisclosureDir": "./dist/assets/license-docs/full-disclosure",
  "readmeTemplatesDir": "./dist/assets/readme-templates"
};

/*
 * Start the promise chain...
 * Ensure all the ./dist (distribution) directories are in place
 */
ensureDir(promiseParams.distDir)
  .then(distDir => {
    console.log(distDir + " created.");
    return ensureDir(promiseParams.imagesDir);
  })
  .then(imagesDir => {
    console.log(imagesDir + " created.")
    return ensureDir(promiseParams.preTextDir);
  })
  .then(preTextDir => {
    console.log(preTextDir + " created.")
    return ensureDir(promiseParams.fullDisclosureDir);
  })
  .then(fullDisclosureDir => {
    console.log(fullDisclosureDir + " created.");
    return ensureDir(promiseParams.readmeTemplatesDir);
  })
  .then(readmeTemplatesDir => {
    console.log(readmeTemplatesDir + " created.");
    readFile(promiseParams.preExistReadmeParamsfile)
  })
  /*
   * If the preExistReadmeParamsFile is entered on the command-line,
   *    it's contents will be assigned to promiseParams.readmeParams...
   *    AND the user will NOT be prompted for any readme generation parameters. 
   */
  .then(data => {

    if (promiseParams.preExistReadmeParamsfile.length > 0 && data.length > 0) {
      promiseParams.readmeParamsFile = promiseParams.preExistReadmeParamsfile;
      promiseParams.readmeParams = data;
    }

    return promiseParams.readmeParams.length === 0 ? promptUser() : promiseParams.readmeParams;
  })
  .then(data => {
    promiseParams.readmeParams = data; // reasign readmeParams in case the user provided a fresh set 

    return writeFile(promiseParams.distDir + "/" + promiseParams.readmeParamsFile,
      JSON.stringify(promiseParams.readmeParams));
  })
  /*
   * Generate the readme markdown file using promiseParams.readmeParams.
   */
  .then((filePathName) => {
    return generateMarkdown(promiseParams);
  })
  .then(readmeContents => {
  /*
   * Here's where we create and write to the new README.md file.
   */
    return writeFile(promiseParams.distDir + "/" + promiseParams.readmeContentsFile, readmeContents);
  })
  /*
   * And here we verify that the "promise" to write the file has been resolved.
   */
  .then(readmePathName => {
    console.log("Successfully created " + readmePathName);
  })
  .catch(err => {
    /*
     * Report any errors (unresolved promises) in the promise chain.
     */
    console.log(err);
  });
