#!/usr/bin/env node

//const { generateMarkdown, ensureDistDir, readFile, writeFileToDist, copySrcStyleToDist } = require('./utils/generateMarkdown.js');
const { readFile, ensureDir, writeFile, generateMarkdown } = require('./utils/generateMarkdown.js');
const promptUser = require('./utils/gatherData.js');
const argv = require('yargs/yargs')(process.argv.slice(2)).argv;

/*
 * Force argv.c (-c <filepath>) to empty string instead of "undefined" if it is NOT entered.
 */
const preExistReadmeParamsFile = argv.c ? argv.c : "";

/*
 * All the parameters needed to fulfill the promise chain
 */
let promiseParams = {
  "preExistReadmeParamsfile" : preExistReadmeParamsFile, // from command-line
  "readmeParams" : "",                                   // set by promptUser()
  "readmeParamsFile" : "readme-params.json",             // readmeParams is persisted in this file
  "readmeContents" : "",                                 // generated by generateMarkdown()
  "readmeContentsFile" : "README.md",                    // the readme file name
  "distDir" : "./dist"                                   // provided by ensureDir() if needed
}; 

/*
 * Start the promise chain
 */
readFile(promiseParams.preExistReadmeParamsfile)
  /*
   * If the preExistReadmeParamsFile is entered on the command-line,
   *    it's contents will be assigned to promiseParams.readmeParams...
   *    AND the user will NOT be prompted for any readme generation parameters. 
   */
  .then(data => {

    if (promiseParams.preExistReadmeParamsfile.length > 0 && data.length > 0) {
      promiseParams.readmeParamsFile = promiseParams.preExistReadmeParamsfile;
      promiseParams.readmeParams = data;
    } 

    return promiseParams.readmeParams.length === 0 ? promptUser() : promiseParams.readmeParams;
  })
  .then(data => {
    /*
     * Ensure the distribution directory is available for writing to.
     */
    promiseParams.readmeParams = data; // reasign readmeParams in case it fresh from the user
    ensureDir(promiseParams.distDir)
     /*
      * promiseParams.readmeParams (either provided on command-line or generated by promptUser())
      *    provides the unique data to create a specific README.md file.
      *    Save/persist the readmeParams in the ./dist/readme-params.json file so it
      *    can be re-used from the command-line in the future.
      */ 
      .then(verifiedDir => {
        return writeFile(verifiedDir + "/" + promiseParams.readmeParamsFile,
            JSON.stringify(promiseParams.readmeParams));
      })
      /*
       * Generate the readme markdown file using promiseParams.readmeParams.
       */
      .then(() => {
        return generateMarkdown(promiseParams.readmeParams);
      })
      .then(readmeContents => {
        /*
         * Here's where we create and write to the new README.md file.
         */
        return writeFile(promiseParams.distDir + "/" + promiseParams.readmeContentsFile, readmeContents);
      })
      /*
       * And here we verify that the "promise" to write the file has been resolved.
       */
      .then(readmePathName => {
        console.log("Successfully created " + readmePathName);
      })
  })
  .catch(err => {
    /*
     * Report any errors (unresolved promises) in the promise chain.
     */
    console.log(err);
  });
